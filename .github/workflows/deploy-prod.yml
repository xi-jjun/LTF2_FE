name: Production deployment

on: 
  pull_request_target:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: lguplus-prod-front

  ECS_CLUSTER_NAME: lg-prod-cluster 
  ECS_CONTAINER_NAME: lg-prod-front-container
  ECS_SERVICE_NAME: lg-prod-service
  ECS_TASK_DEFINITION: lg-prod-task

jobs:
  approve:
    runs-on: ubuntu-latest

    steps:
    - name: Approve 
      run: echo For security reasons, all pull requests need to be approved first before running any automated CI

  PRODUCTION_CI_CD_start:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code.
      uses: actions/checkout@v3

    - name: Install Dependencies 
      run: npm install
      working-directory: "./client"

    - name: npm build                  
      run: npm run build
      working-directory: "./client"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile-dev -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
        echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"
      working-directory: "./client"
    
    - name: Download task definition
      id: task-file-json
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECS_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
    